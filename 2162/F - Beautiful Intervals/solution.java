import java.io.*;import java.util.*; public class Main {    static final class R {        private final InputStream in;        private final byte[] buf = new byte[1 << 16];        private int p = 0, l = 0;        R(InputStream is) { in = is; }        private int r() throws IOException {            if (p >= l) {                l = in.read(buf);                p = 0;                if (l <= 0) return -1;            }            return buf[p++];        }        int i() throws IOException {            int c, s = 1, v = 0;            do { c = r(); } while (c <= 32);            if (c == '-') { s = -1; c = r(); }            while (c > 32) { v = v * 10 + (c - '0'); c = r(); }            return v * s;        }    }     public static void main(String[] args) throws Exception {        R rr = new R(System.in);        StringBuilder sb = new StringBuilder();        int t = rr.i();        while (t-- > 0) {            int n = rr.i(), m = rr.i();            int[][] seg = new int[m][2];            int gL = 1, gR = n;            ArrayList<Integer>[] start = new ArrayList[n + 3];            ArrayList<Integer>[] endL = new ArrayList[n + 3];            ArrayList<Integer>[] startR = new ArrayList[n + 3];            for (int i = 0; i <= n + 2; i++) {                start[i] = new ArrayList<>();                endL[i] = new ArrayList<>();                startR[i] = new ArrayList<>();            }            int[] diff = new int[n + 3];            for (int i = 0; i < m; i++) {                int l = rr.i(), r = rr.i();                seg[i][0] = l; seg[i][1] = r;                if (l > gL) gL = l;                if (r < gR) gR = r;                start[l].add(l);                startR[l].add(r);                endL[r + 1].add(l);                diff[l]++; diff[r + 1]--;            }            int[] cov = new int[n + 2];            int run = 0;            for (int i = 1; i <= n; i++) {                run += diff[i];                cov[i] = run;            }            int[] L = new int[n + 2];            int[] R = new int[n + 2];            TreeMap<Integer,Integer> activeL = new TreeMap<>();            PriorityQueue<Integer> activeR = new PriorityQueue<>();            for (int i = 1; i <= n; i++) {                for (int v : start[i]) activeL.put(v, activeL.getOrDefault(v, 0) + 1);                for (int v : startR[i]) activeR.add(v);                for (int v : endL[i]) {                    int c = activeL.getOrDefault(v, 0);                    if (c <= 1) activeL.remove(v);                    else activeL.put(v, c - 1);                }                while (!activeR.isEmpty() && activeR.peek() < i) activeR.poll();                if (cov[i] == 0) {                    L[i] = 1; R[i] = n;                } else {                    L[i] = activeL.lastKey();                    R[i] = activeR.peek();                }            }            int[] ans = new int[n + 1];            Arrays.fill(ans, -1);            boolean[] usedP = new boolean[n + 1];            if (gL <= gR) {                int p0 = gL;                ans[p0] = 0;                usedP[p0] = true;                int v = 1;                for (int i = 1; i <= n; i++) if (!usedP[i]) ans[i] = v++;            } else {                int free = -1;                for (int i = 1; i <= n; i++) if (cov[i] == 0) { free = i; break; }                if (free != -1) {                    ans[free] = 0;                    usedP[free] = true;                    int v = 1;                    for (int i = 1; i <= n; i++) if (!usedP[i]) ans[i] = v++;                } else {                    int a = -1, b = -1;                    for (int i = 1; i <= n; i++) {                        if (cov[i] > 0 && R[i] - L[i] + 1 >= 2) {                            a = i;                            b = (i != L[i] ? L[i] : R[i]);                            break;                        }                    }                    if (a != -1) {                        ans[a] = 0;                        ans[b] = 1;                        usedP[a] = true; usedP[b] = true;                        int v = 2;                        for (int i = 1; i <= n; i++) if (!usedP[i]) ans[i] = v++;                    } else {                        int x = 1, y = 3, z = 2;                        ans[x] = 0; ans[y] = 1; ans[z] = 2;                        usedP[x] = usedP[y] = usedP[z] = true;                        int v = 3;                        for (int i = 1; i <= n; i++) if (!usedP[i]) ans[i] = v++;                    }                }            }            for (int i = 1; i <= n; i++) {                if (i > 1) sb.append(' ');                sb.append(ans[i]);            }            sb.append('\n');        }        System.out.print(sb.toString());    }}