import java.io.*;import java.util.*; public class Main2 {    static class FastIn {        private final InputStream in;        private final byte[] buf = new byte[1 << 16];        private int p = 0, l = 0;        FastIn(InputStream is){ in = is; }        private int r() throws IOException {            if (p >= l) { l = in.read(buf); p = 0; if (l <= 0) return -1; }            return buf[p++];        }        int nextInt() throws IOException {            int c, s = 1, x = 0;            do c = r(); while (c <= 32);            if (c == '-') { s = -1; c = r(); }            while (c > 32) { x = x * 10 + (c - '0'); c = r(); }            return x * s;        }        long nextLong() throws IOException {            int c; long s = 1, x = 0;            do c = r(); while (c <= 32);            if (c == '-') { s = -1; c = r(); }            while (c > 32) { x = x * 10 + (c - '0'); c = r(); }            return x * s;        }        String next() throws IOException {            int c; StringBuilder sb = new StringBuilder();            do c = r(); while (c <= 32);            while (c > 32) { sb.append((char)c); c = r(); }            return sb.toString();        }    }     static final int MAXP = 35;    static final long INF = (1L << 61);     static long capAdd(long a, long b) {        long z = a + b;        if (z >= INF) return INF;        return z;    }     static long mulPow2(long x, int k) {        if (x >= INF) return INF;        if (k >= 61) return INF;        long lim = INF >> k;        if (x >= lim) return INF;        return x << k;    }     static long eval(long x, int m, long d) {        if (d >= x) return 0;        long y = x - d;        if (m >= 61) return 0;        return y >>> m;    }     public static void main(String[] args) throws Exception {        FastIn in = new FastIn(System.in);        int t = in.nextInt();        StringBuilder out = new StringBuilder();        while (t-- > 0) {            int n = in.nextInt();            int q = in.nextInt();            String s = in.next();             int[][] nxt = new int[n][MAXP];            int[][] m = new int[n][MAXP];            long[][] d = new long[n][MAXP];             for (int i = 0; i < n; i++) {                nxt[i][0] = (i + 1) % n;                if (s.charAt(i) == 'A') {                    m[i][0] = 0;                    d[i][0] = 1;                } else {                    m[i][0] = 1;                    d[i][0] = 0;                }            }             for (int p = 1; p < MAXP; p++) {                for (int i = 0; i < n; i++) {                    int mid = nxt[i][p - 1];                    nxt[i][p] = nxt[mid][p - 1];                    int m1 = m[i][p - 1], m2 = m[mid][p - 1];                    m[i][p] = Math.min(61, m1 + m2);                    long d1 = d[i][p - 1], d2 = d[mid][p - 1];                    long t2 = mulPow2(d2, m1);                    d[i][p] = capAdd(d1, t2);                }            }             for (int qi = 0; qi < q; qi++) {                long a = in.nextLong();                long res = 0;                int pos = 0;                long v = a;                for (int p = MAXP - 1; p >= 0; p--) {                    long nv = eval(v, m[pos][p], d[pos][p]);                    if (nv > 0) {                        v = nv;                        res += 1L << p;                        pos = nxt[pos][p];                    }                }                out.append(res + 1).append('\n');            }        }        System.out.print(out);    }}